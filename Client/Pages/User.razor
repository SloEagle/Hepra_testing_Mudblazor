@page "/user/{Id:int}"
@inject NavigationManager NavigationManager
@inject IUserService UserService

<h3>User</h3>

@if(UserService.User == null)
{
    <span>Loading...</span>
}
else
{
    <EditForm Model="@UserService.User" OnValidSubmit="SetToValid" OnInvalidSubmit="SetToInvalid">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <MudGrid>
            <MudItem>
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Name" @bind-Value="UserService.User.Name" For="@(() => UserService.User.Name)"></MudTextField>
                        <MudTextField Label="Surname" @bind-Value="UserService.User.Surname" For="@(() => UserService.User.Surname)"></MudTextField>
                        <MudTextField Label="Email" @bind-Value="UserService.User.Email" For="@(() => UserService.User.Email)"></MudTextField>
                        <MudTextField Label="PhoneNumber" @bind-Value="UserService.User.PhoneNumber" For="@(() => UserService.User.PhoneNumber)"></MudTextField>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        <ValidationSummary></ValidationSummary>
        <hr />
        <MudButton ButtonType="ButtonType.Submit">Submit</MudButton>
    </EditForm>  

    <MudAlert Severity="@SeverityLevel">Error state</MudAlert>
}

@code {
    [Parameter]
    public int Id { get; set; } = 0;

    public MudBlazor.Severity SeverityLevel { get; set; } = Severity.Success;

    protected override async Task OnInitializedAsync()
    {
        await UserService.GetUserById(Id);
    }

    private void SetToValid()
    {
        SeverityLevel = Severity.Success;
    }

    private void SetToInvalid()
    {
        SeverityLevel = Severity.Error;
    }
}
